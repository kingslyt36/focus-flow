scalar DateTime

# Data payload
type AuthPayload {
  user: UserPayload!
  # tokens: TokensPayload!
}

type UserPayload {
  id: ID!
  username: String!
  email: String!
}

# type TokensPayload {
#   accessToken: String!
#   refreshToken: String!
# }

# Register related
input RegisterInput {
  username: String!
  email: String!
  password: String!
}

type RegisterResponse {
  status: Int!
  message: String!
  data: AuthPayload!
}

# Login related
input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  status: Int!
  message: String!
  data: AuthPayload!
}

# Logout related
type LogoutResponse {
  status: Int!
  message: String!
}

# Query and Mutation
type Query {
  sayHello: String!
}

type Mutation {
  register(registerInput: RegisterInput!): RegisterResponse!
  login(loginInput: LoginInput!): LoginResponse!
  logout: LogoutResponse!
}
